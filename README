# My_minishell üêö

Um shell minimalista em C que replica funcionalidades b√°sicas do bash, desenvolvido como parte do curr√≠culo da 42 School.

## ‚ú® Funcionalidades Principais

- **Execu√ß√£o de comandos** como no bash (`ls`, `grep`, `awk`, etc.)
- **Redirecionamentos** (`>`, `>>`, `<`, `<<`)
- **Pipes** (`|`) para encadeamento de comandos
- **Vari√°veis de ambiente** (`$PATH`, `$USER`, etc.)
- **Expans√£o de vari√°veis** (`echo $USER`)
- **Hist√≥rico de comandos** (setas para cima/baixo)
- **Sinais** (Ctrl-C, Ctrl-D, Ctrl-\)
- **Comandos built-in**:
  - `cd` (mudar diret√≥rio)
  - `echo` (com op√ß√£o -n)
  - `pwd` (mostrar diret√≥rio atual)
  - `export` (definir vari√°veis de ambiente)
  - `unset` (remover vari√°veis)
  - `env` (listar ambiente)
  - `exit` (sair do shell)

## üõ†Ô∏è Como foi constru√≠do

### Arquitetura do Projeto

```
src/
‚îú‚îÄ‚îÄ lexer/         # An√°lise l√©xica (tokeniza√ß√£o)
‚îú‚îÄ‚îÄ parser/        # An√°lise sint√°tica (√°rvore de comandos)
‚îú‚îÄ‚îÄ executor/      # Execu√ß√£o de comandos
‚îú‚îÄ‚îÄ builtins/      # Comandos built-in
‚îú‚îÄ‚îÄ utils/         # Fun√ß√µes auxiliares
‚îú‚îÄ‚îÄ signals/       # Tratamento de sinais
‚îî‚îÄ‚îÄ minishell.c    # Ponto de entrada principal
```

### Tecnologias e Conceitos

- **Linguagem**: C puro (Norma 42)
- **Bibliotecas**: readline (hist√≥rico e edi√ß√£o de linha)
- **Gerenciamento de mem√≥ria**: Free seguro e sem leaks
- **Processos**: fork(), execve(), waitpid()
- **Pipes**: pipe(), dup2()
- **Sinais**: signal(), sigaction()
- **Parsing**: √Årvore sint√°tica e expans√£o de tokens

## üöÄ Como executar

1. Clone o reposit√≥rio:
```bash
git clone https://github.com/jhuliaah/My_minishell.git
cd My_minishell
```

2. Compile com Make:
```bash
make
```

3. Execute o minishell:
```bash
./minishell
```

## ÔøΩ Desafios e Solu√ß√µes

1. **Pipeline de comandos**:
   - *Desafio*: Implementar pipes m√∫ltiplos (`cmd1 | cmd2 | cmd3`)
   - *Solu√ß√£o*: Cria√ß√£o recursiva de processos e redirecionamento de file descriptors

2. **Redirecionamentos aninhados**:
   - *Desafio*: Lidar com combina√ß√µes como `cmd < in.txt > out.txt`
   - *Solu√ß√£o*: Sistema de prioridade e restaura√ß√£o de file descriptors

3. **Expans√£o de vari√°veis**:
   - *Desafio*: Expandir `$VAR` no meio de strings (`echo "Hello $USER"`)
   - *Solu√ß√£o*: Tokeniza√ß√£o especial e reconstru√ß√£o de strings

## üìö Aprendizados

- Gerenciamento avan√ßado de processos em C
- Implementa√ß√£o de um lexer/parser b√°sico
- Trabalho com file descriptors e pipes
- Manipula√ß√£o de sinais em programas interativos
- Gerenciamento rigoroso de mem√≥ria

## üìù Licen√ßa

Este projeto est√° licenciado sob a Licen√ßa MIT - veja o arquivo [LICENSE](LICENSE) para detalhes.

---

Projeto da 42 School(https://42.fr)